{"version":3,"sources":["components/display.js","components/controls.js","utilities/accurateInterval.js","App.js","serviceWorker.js","index.js"],"names":["Display","_ref","timeLeft","timerType","minutesLeft","Math","floor","slice","secondsLeft","react_default","a","createElement","id","Controls","titleID","titleValue","buttonDown","onClick","lengthID","breakLength","buttonUp","className","value","accurateInterval","fn","time","cancel","nextAt","timeout","wrapper","Date","getTime","setTimeout","clearTimeout","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","sessionLength","intervalID","isRunning","buttonStyle","reset","bind","assertThisInitialized","handleBreak","handleSession","handleTimer","startCountdown","countdown","control","alarm","beepSound","pause","currentTime","setState","e","event","currentTarget","handleLengthChange","stateToChange","prevState","defineProperty","_ref2","_this$state","_this2","_this$state2","play","_this3","controls_Controls","display_Display","src","ref","audio","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15a0482a.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Display = ({ timeLeft, timerType }) => {\n  const minutesLeft = ('0' + Math.floor(timeLeft / 60)).slice(-2);\n  const secondsLeft = ('0' + timeLeft % 60).slice(-2);\n  return (\n    <div id='timer-label'>\n      <h1>{timerType}</h1>\n      <h1 id='time-left'>{minutesLeft}:{secondsLeft}</h1>\n    </div>\n  )\n}\n","import React from 'react';\n\nexport const Controls = ({titleID, titleValue, buttonDown, onClick, lengthID, breakLength, buttonUp}) => (\n  <div className='control-container'>\n    <h1 id={titleID}>\n      {titleValue}</h1>\n    <h1 id={lengthID}>\n      {breakLength} minutes</h1>\n    <button id={buttonUp} onClick={onClick} value='+'>\n      <i className=\"fa fa-angle-up fa-2x\" value='+'/></button>\n    <button id={buttonDown} onClick={onClick} value='-'>\n      <i className=\"fa fa-angle-down fa-2x\"/></button>\n  </div>\n)\n","const accurateInterval = function(fn, time) {\n    var cancel, nextAt, timeout, wrapper;\n    nextAt = new Date().getTime() + time;\n    timeout = null;\n    wrapper = function() {\n      nextAt += time;\n      timeout = setTimeout(wrapper, nextAt - new Date().getTime());\n      return fn();\n    };\n    cancel = function() {\n      return clearTimeout(timeout);\n    };\n    timeout = setTimeout(wrapper, nextAt - new Date().getTime());\n    return {\n      cancel: cancel\n    };\n  };\n\nexport default accurateInterval;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Display } from './components/display';\nimport { Controls } from './components/controls';\nimport accurateInterval from './utilities/accurateInterval';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      breakLength: 5,\n      sessionLength: 25,\n      timerType: 'Session',\n      timeLeft: 1500,\n      intervalID: '',\n      isRunning: false,\n      buttonStyle: 'fa fa-play fa-2x'\n    }\n    this.reset = this.reset.bind(this);\n    this.handleBreak = this.handleBreak.bind(this);\n    this.handleSession = this.handleSession.bind(this);\n    this.handleTimer = this.handleTimer.bind(this);\n    this.startCountdown = this.startCountdown.bind(this);\n    this.countdown = this.countdown.bind(this);\n    this.control = this.control.bind(this);\n    this.alarm = this.alarm.bind(this);\n  }\n\n  reset() {\n    this.state.intervalID && this.state.intervalID.cancel();\n    this.beepSound.pause();\n    this.beepSound.currentTime = 0;\n    this.setState({\n      breakLength: 5,\n      sessionLength: 25,\n      timerType: 'Session',\n      timeLeft: 1500,\n      intervalID: '',\n      isRunning: false,\n      buttonStyle: 'fa fa-play fa-2x'\n    })\n  }\n\n  handleBreak(e){\n    let event = e.currentTarget.value;\n    this.handleLengthChange(event, 'breakLength')\n  }\n\n  handleSession(e){\n    let event = e.currentTarget.value;\n    this.handleLengthChange(event, 'sessionLength');\n  }\n\n  handleLengthChange(event, stateToChange){\n    if (event === '+' && this.state[stateToChange] < 60) {\n      this.setState( prevState => ({\n        [stateToChange]: prevState[stateToChange] + 1,\n        timeLeft: stateToChange === 'sessionLength' ?\n          prevState.timeLeft + 60 : prevState.timeLeft\n      }))\n    } else if (event === '-' && this.state[stateToChange] > 1) {\n      this.setState( prevState => ({\n        [stateToChange]: prevState[stateToChange] - 1,\n          timeLeft: stateToChange === 'sessionLength' ?\n          prevState.timeLeft - 60 : prevState.timeLeft\n      }))\n    }\n  }\n\n  handleTimer(){\n    const { isRunning, intervalID } = this.state;\n    isRunning ? intervalID && intervalID.cancel() : this.startCountdown();\n    this.setState( prevState => ({\n      isRunning: !prevState.isRunning,\n      buttonStyle: prevState.isRunning ? 'fa fa-play fa-2x' : 'fa fa-pause fa-2x'\n    }))\n  }\n\n  startCountdown(){\n    this.setState({\n      intervalID: accurateInterval( () => {\n        this.countdown();\n        this.control();\n      }, 1000)\n    })\n  }\n\n  countdown(){\n    this.setState( prevState => ({ timeLeft: prevState.timeLeft - 1 }))\n  }\n\n  control(){\n    const { timeLeft, intervalID, timerType } = this.state;\n    this.alarm();\n    if (timeLeft < 0){\n      intervalID.cancel();\n      if (timerType === 'Session') {\n        this.setState( prevState => ({\n          timeLeft: prevState.breakLength * 60,\n          timerType: 'Break'\n        }))\n      } else {\n        this.setState( prevState => ({\n          timeLeft: prevState.sessionLength * 60,\n          timerType: 'Session'\n        }))\n      }\n      this.startCountdown();\n    }\n  }\n\n  alarm(){\n    if (this.state.timeLeft === 0) {\n      this.beepSound.currentTime = 0;\n      this.beepSound.play();\n    }\n  }\n\n  render(){\n    return(\n      <div className='clock-container'>\n        <Controls\n          titleID='break-label'\n          titleValue='Break Length'\n          buttonDown='break-decrement'\n          buttonUp='break-increment'\n          lengthID='break-length'\n          breakLength={this.state.breakLength}\n          onClick={this.handleBreak}/>\n        <div className='display-container'>\n          <Display\n            timeLeft={this.state.timeLeft}\n            timerType={this.state.timerType}/>\n          <button id='start_stop' onClick={this.handleTimer}><i className={this.state.buttonStyle}></i></button>\n          <button id='reset' onClick={this.reset}><i className=\"fas fa-sync-alt fa-2x\"></i></button>\n          <audio\n            id='beep'\n            src='https://goo.gl/65cBl1'\n            ref={(audio) => {this.beepSound = audio}}/>\n        </div>\n        <Controls\n          titleID='session-label'\n          titleValue='Session Length'\n          buttonDown='session-decrement'\n          buttonUp='session-increment'\n          lengthID='session-length'\n          breakLength={this.state.sessionLength}\n          onClick={this.handleSession}/>\n\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}